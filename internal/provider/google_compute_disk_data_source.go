// Copyright (c) IBM Corporation
// SPDX-License-Identifier: Apache-2.0
// Code generated by provider-code-generator; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/datasourcevalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	turboclient "github.com/IBM/turbonomic-go-client"
)

var (
	_ validator.String
	_ = stringvalidator.LengthAtLeast(1)
	_ = regexp.MustCompile(".*")
)

type GoogleComputeDiskEntityModel struct {
	EntityUuid                   types.String `tfsdk:"entity_uuid"`
	EntityName                   types.String `tfsdk:"entity_name"`
	EntityType                   types.String `tfsdk:"entity_type"`
	CurrentType                  types.String `tfsdk:"current_type"`
	NewType                      types.String `tfsdk:"new_type"`
	DefaultType                  types.String `tfsdk:"default_type"`
	CurrentProvisionedIops       types.Int64  `tfsdk:"current_provisioned_iops"`
	NewProvisionedIops           types.Int64  `tfsdk:"new_provisioned_iops"`
	DefaultProvisionedIops       types.Int64  `tfsdk:"default_provisioned_iops"`
	CurrentProvisionedThroughput types.Int64  `tfsdk:"current_provisioned_throughput"`
	NewProvisionedThroughput     types.Int64  `tfsdk:"new_provisioned_throughput"`
	DefaultProvisionedThroughput types.Int64  `tfsdk:"default_provisioned_throughput"`
	CurrentSize                  types.Int64  `tfsdk:"current_size"`
	NewSize                      types.Int64  `tfsdk:"new_size"`
	DefaultSize                  types.Int64  `tfsdk:"default_size"`
}

type GoogleComputeDiskDataSource struct {
	client *turboclient.Client
}

func NewGoogleComputeDiskDataSource() datasource.DataSource {
	return &GoogleComputeDiskDataSource{}
}

func (d *GoogleComputeDiskDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_google_compute_disk"
}

func (d *GoogleComputeDiskDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "The following example demonstrates the syntax for the `turbonomic_google_compute_disk` data source.",
		Attributes: map[string]schema.Attribute{

			"entity_uuid": schema.StringAttribute{
				MarkdownDescription: "Turbonomic UUID of the virtual volume entity",
				Computed:            true,
			},

			"entity_name": schema.StringAttribute{
				MarkdownDescription: "name of the virtual volume entity",
				Required:            true,
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},

			"entity_type": schema.StringAttribute{
				MarkdownDescription: "type of the virtual volume entity",
				Computed:            true,
			},

			"current_type": schema.StringAttribute{
				MarkdownDescription: "current tier of the virtual volume entity",
				Computed:            true,
			},

			"new_type": schema.StringAttribute{
				MarkdownDescription: "recommended tier of the virtual volume entity",
				Computed:            true,
			},

			"default_type": schema.StringAttribute{
				MarkdownDescription: "default tier of the virtual volume entity",
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.OneOfCaseInsensitive("pd-standard", "pd-balanced", "pd-ssd", "pd-extreme", "hyperdisk-balanced", "hyperdisk-throughput", "hyperdisk-extreme"),
				},
			},

			"current_provisioned_iops": schema.Int64Attribute{
				MarkdownDescription: "current IOPS of the volume entity, update is only supported by hyperdisk skus",
				Computed:            true,
			},

			"new_provisioned_iops": schema.Int64Attribute{
				MarkdownDescription: "recommended IOPS of the volume entity, update is only supported by hyperdisk skus",
				Computed:            true,
			},

			"default_provisioned_iops": schema.Int64Attribute{
				MarkdownDescription: "default IOPS of the volume entity, update is only supported by hyperdisk skus",
				Optional:            true,
			},

			"current_provisioned_throughput": schema.Int64Attribute{
				MarkdownDescription: "current throughput of the volume entity in MiB/s, update is only supported by hyperdisk skus",
				Computed:            true,
			},

			"new_provisioned_throughput": schema.Int64Attribute{
				MarkdownDescription: "recommended throughput of the volume entity in MiB/s, update is only supported by hyperdisk skus",
				Computed:            true,
			},

			"default_provisioned_throughput": schema.Int64Attribute{
				MarkdownDescription: "default throughput of the volume entity in MiB/s, update is only supported by hyperdisk skus",
				Optional:            true,
			},

			"current_size": schema.Int64Attribute{
				MarkdownDescription: "current size of the volume entity in GiB",
				Computed:            true,
			},

			"new_size": schema.Int64Attribute{
				MarkdownDescription: "recommended size of the volume entity in GiB",
				Computed:            true,
			},

			"default_size": schema.Int64Attribute{
				MarkdownDescription: "default size of the volume entity in GiB",
				Optional:            true,
			},
		},
	}
}

func (d *GoogleComputeDiskDataSource) ConfigValidators(ctx context.Context) []datasource.ConfigValidator {
	return []datasource.ConfigValidator{
		datasourcevalidator.RequiredTogether(
			path.MatchRoot("default_type"),
			path.MatchRoot("default_provisioned_iops"),
			path.MatchRoot("default_provisioned_throughput"),
			path.MatchRoot("default_size"),
		),
	}
}

func (d *GoogleComputeDiskDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*turboclient.Client)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected: *turboclient.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	d.client = client
}

func (d *GoogleComputeDiskDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state GoogleComputeDiskEntityModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	state.EntityType = types.StringValue("VirtualVolume")

	enName, enTyp := state.EntityName.ValueString(), state.EntityType.ValueString()
	entity, errDiag := GetEntitiesByNameAndType(d.client, enName, enTyp, "CLOUD", "GCP")
	if errDiag != nil {
		tflog.Error(ctx, errDiag.Detail())
		resp.Diagnostics.AddError(errDiag.Summary(), errDiag.Detail())
		return
	} else if len(entity) == 0 {
		errDetail := fmt.Sprintf("Entity %s of type %s not found in Turbonomic instance", enName, enTyp)
		tflog.Warn(ctx, errDetail)

		// if entity doesn't exist, update new values with default values
		setDefaultsGoogleComputeDiskToNewState(&state)

		state.EntityType = types.StringNull()
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Entity id found: %s\n", entity[0].UUID))
	state.EntityUuid = types.StringValue(entity[0].UUID)

	// sets current fields in state
	var err error
	state, err = HandleGoogleComputeDiskCurrentState(ctx, state, entity)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unknown storage type for current value",
			err.Error(),
		)
		return
	}
	//as stat returns current value as projected when there are no action.calling it before  checking action to ensure data is available
	commodityActions, errDiag := GetStatsByEntityUUID(d.client, entity[0].UUID)
	if errDiag != nil {
		tflog.Error(ctx, errDiag.Detail())
		resp.Diagnostics.AddError(errDiag.Summary(), errDiag.Detail())
		return
	}

	// Use the extracted function to handle commodity actions
	if err := HandleGoogleComputeDiskCommodityAction(ctx, commodityActions, &state); err != nil {
		tflog.Error(ctx, err.Error())
		resp.Diagnostics.AddError("Error while processing commodity actions", err.Error())
		return
	}

	actions, errDiag := GetActionsByEntityUUIDAndType(d.client, entity[0].UUID, "SCALE")
	if errDiag != nil {
		tflog.Error(ctx, errDiag.Detail())
		resp.Diagnostics.AddError(errDiag.Summary(), errDiag.Detail())
		return
	} else if len(actions) == 0 {
		errDetail := fmt.Sprintf("no matching action found for entity id: %s", entity[0].UUID)
		tflog.Trace(ctx, errDetail)

		// if action doesn't exist, update new with current value
		setCurrentGoogleComputeDiskToNewState(&state)

		if err := TagEntity(d.client, state.EntityUuid.ValueString()); err != nil {
			resp.Diagnostics.AddError("Error while tagging an entity", err.Error())
		}

		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Action id found: %d\n", actions[0].ActionID))

	state, err = HandleGoogleComputeDiskAction(ctx, resp, state, actions)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unknown storage type for new value",
			err.Error(),
		)
		return
	}

	// update new and curr values with default values, if its still empty
	setDefaultsGoogleComputeDiskToCurrentState(&state)
	setDefaultsGoogleComputeDiskToNewState(&state)

	if err := TagEntity(d.client, state.EntityUuid.ValueString()); err != nil {
		resp.Diagnostics.AddError("Error while tagging an entity", err.Error())
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
