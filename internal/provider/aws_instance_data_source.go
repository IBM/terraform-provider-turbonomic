// Copyright (c) IBM Corporation
// SPDX-License-Identifier: Apache-2.0
// Code generated by provider-code-generator; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/datasourcevalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	turboclient "github.com/IBM/turbonomic-go-client"
)

var (
	_ validator.String
	_ = stringvalidator.LengthAtLeast(1)
	_ = regexp.MustCompile(".*")
)

type AwsInstanceEntityModel struct {
	EntityUuid          types.String `tfsdk:"entity_uuid"`
	EntityName          types.String `tfsdk:"entity_name"`
	EntityType          types.String `tfsdk:"entity_type"`
	CurrentInstanceType types.String `tfsdk:"current_instance_type"`
	NewInstanceType     types.String `tfsdk:"new_instance_type"`
	DefaultInstanceType types.String `tfsdk:"default_instance_type"`
}

type AwsInstanceDataSource struct {
	client *turboclient.Client
}

func NewAwsInstanceDataSource() datasource.DataSource {
	return &AwsInstanceDataSource{}
}

func (d *AwsInstanceDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_aws_instance"
}

func (d *AwsInstanceDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "The following example demonstrates the syntax for the `turbonomic_aws_instance` data source.",
		Attributes: map[string]schema.Attribute{

			"entity_uuid": schema.StringAttribute{
				MarkdownDescription: "Turbonomic UUID of the AWS EC2 entity",
				Computed:            true,
			},

			"entity_name": schema.StringAttribute{
				MarkdownDescription: "name of the AWS EC2 entity",
				Required:            true,
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},

			"entity_type": schema.StringAttribute{
				MarkdownDescription: "type of the AWS EC2 entity",
				Computed:            true,
			},

			"current_instance_type": schema.StringAttribute{
				MarkdownDescription: "current instance type of the AWS EC2 entity",
				Computed:            true,
			},

			"new_instance_type": schema.StringAttribute{
				MarkdownDescription: "recommended instance type of the AWS EC2 entity",
				Computed:            true,
			},

			"default_instance_type": schema.StringAttribute{
				MarkdownDescription: "default instance type of the AWS EC2 entity",
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(20), stringvalidator.RegexMatches(regexp.MustCompile(`^[A-Za-z0-9._-]+$`), "must contain only alphanumeric, '.', '-', or '_' characters"),
				},
			},
		},
	}
}

func (d *AwsInstanceDataSource) ConfigValidators(ctx context.Context) []datasource.ConfigValidator {
	return []datasource.ConfigValidator{
		datasourcevalidator.RequiredTogether(
			path.MatchRoot("default_instance_type"),
		),
	}
}

func (d *AwsInstanceDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*turboclient.Client)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected: *turboclient.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	d.client = client
}

func (d *AwsInstanceDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state AwsInstanceEntityModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	state.EntityType = types.StringValue("VirtualMachine")

	enName, enTyp := state.EntityName.ValueString(), state.EntityType.ValueString()
	entity, errDiag := GetEntitiesByNameAndType(d.client, enName, enTyp, "CLOUD", "AWS")
	if errDiag != nil {
		tflog.Error(ctx, errDiag.Detail())
		resp.Diagnostics.AddError(errDiag.Summary(), errDiag.Detail())
		return
	} else if len(entity) == 0 {
		errDetail := fmt.Sprintf("Entity %s of type %s not found in Turbonomic instance", enName, enTyp)
		tflog.Warn(ctx, errDetail)

		// if entity doesn't exist, update new values with default values
		state.NewInstanceType = applyDefaultIfEmpty(
			state.NewInstanceType,
			state.DefaultInstanceType,
		)

		state.EntityType = types.StringNull()
		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Entity id found: %s\n", entity[0].UUID))
	state.EntityUuid = types.StringValue(entity[0].UUID)

	// sets current fields in state
	var err error
	state, err = HandleAwsInstanceCurrentState(ctx, state, entity)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unknown storage type for current value",
			err.Error(),
		)
		return
	}

	actions, errDiag := GetActionsByEntityUUIDAndType(d.client, entity[0].UUID, "SCALE")
	if errDiag != nil {
		tflog.Error(ctx, errDiag.Detail())
		resp.Diagnostics.AddError(errDiag.Summary(), errDiag.Detail())
		return
	} else if len(actions) == 0 {
		errDetail := fmt.Sprintf("no matching action found for entity id: %s", entity[0].UUID)
		tflog.Trace(ctx, errDetail)

		// if action doesn't exist, update new with current value
		state.NewInstanceType = state.CurrentInstanceType

		if err := TagEntity(d.client, state.EntityUuid.ValueString()); err != nil {
			resp.Diagnostics.AddError("Error while tagging an entity", err.Error())
		}

		resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Action id found: %d\n", actions[0].ActionID))

	state, err = HandleAwsInstanceAction(ctx, resp, state, actions)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unknown storage type for new value",
			err.Error(),
		)
		return
	}

	// update new and curr values with default values, if its still empty
	state.CurrentInstanceType = applyDefaultIfEmpty(
		state.CurrentInstanceType,
		state.DefaultInstanceType,
	)
	state.NewInstanceType = applyDefaultIfEmpty(
		state.NewInstanceType,
		state.DefaultInstanceType,
	)

	if err := TagEntity(d.client, state.EntityUuid.ValueString()); err != nil {
		resp.Diagnostics.AddError("Error while tagging an entity", err.Error())
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
