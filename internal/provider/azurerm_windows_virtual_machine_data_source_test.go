// Copyright (c) IBM Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by provider-code-generator

package provider

import (
	"fmt"
	"net/http"
	"regexp"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

const (
	azureWindowsVMConfig = `
	data "turbonomic_azurerm_windows_virtual_machine" "test" {
		entity_name  = "%s"
		default_size = "%s"
	}
	`
	azureWindowsVMConfigNoDefaultType = `
	data "turbonomic_azurerm_windows_virtual_machine" "test" {
		entity_name  = "%s"
	}
	`
	azureWindowsVMDataSourceRef = "data.turbonomic_azurerm_windows_virtual_machine.test"
	azureWindowsVMName          = "test-vm"
	azureWindowsVMCurrentType   = "standard_b1s"
	azureWindowsVMDefaultType   = "standard_d2s_v3"
	azureWindowsVMInvalidType   = "invalid@type#"
)

// Test for a valid entity
func TestAzurermWindowsVirtualMachineDataSourceWithValidEntity(t *testing.T) {
	mockServer := createLocalServer(t,
		loadTestFile(t, azureWindowsVMTestDataBaseDir, searchRespTestData),
		loadTestFile(t, azureWindowsVMTestDataBaseDir, validVmActionRespTestData),
		loadTestFile(t, entityTagTestDataBaseDir, entityTagsRespTestData),
		loadTestFile(t, entityTagTestDataBaseDir, entityTagRespTestData))
	defer mockServer.Close()

	providerConfig := fmt.Sprintf(config, strings.TrimPrefix(mockServer.URL, "https://"))

	for _, tc := range []struct {
		name                string
		testEntity          string
		expectedEntityName  string
		expectedDefaultType string
		expectedCurrentType string
		expectedNewType     string
	}{
		{
			name:                "Valid VM recommendation",
			testEntity:          azureWindowsVMName,
			expectedEntityName:  azureWindowsVMName,
			expectedDefaultType: azureWindowsVMDefaultType,
			expectedCurrentType: azureWindowsVMCurrentType,
			expectedNewType:     azureWindowsVMDefaultType,
		},
	} {
		t.Run(tc.name, func(t *testing.T) {
			resource.Test(t, resource.TestCase{
				ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
				Steps: []resource.TestStep{
					{
						Config: providerConfig + fmt.Sprintf(azureWindowsVMConfig, tc.testEntity, tc.expectedDefaultType),
						Check: resource.ComposeAggregateTestCheckFunc(
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "entity_name", tc.expectedEntityName),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "entity_type", vmEntityType),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "default_size", tc.expectedDefaultType),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "current_size", tc.expectedCurrentType),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "new_size", tc.expectedNewType),
						),
					},
				},
			})
		})
	}
}

// Test for an invalid entity
func TestAzurermWindowsVirtualMachineDataSourceWithInvalidEntity(t *testing.T) {
	mockServer := createLocalServer(t, "[]", "", "", "")
	defer mockServer.Close()

	providerConfig := fmt.Sprintf(config, strings.TrimPrefix(mockServer.URL, "https://"))

	for _, tc := range []struct {
		name                string
		testEntity          string
		expectedEntityName  string
		expectedDefaultType string
		expectedNewType     string
	}{
		{
			name:                "Empty VM search",
			testEntity:          azureWindowsVMName,
			expectedEntityName:  azureWindowsVMName,
			expectedDefaultType: azureWindowsVMDefaultType,
			expectedNewType:     azureWindowsVMDefaultType,
		},
	} {
		t.Run(tc.name, func(t *testing.T) {
			resource.Test(t, resource.TestCase{
				ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
				Steps: []resource.TestStep{
					{
						Config: providerConfig + fmt.Sprintf(azureWindowsVMConfig, tc.testEntity, tc.expectedDefaultType),
						Check: resource.ComposeAggregateTestCheckFunc(
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "entity_name", tc.expectedEntityName),
							resource.TestCheckNoResourceAttr(azureWindowsVMDataSourceRef, "entity_type"),
							resource.TestCheckNoResourceAttr(azureWindowsVMDataSourceRef, "current_size"),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "new_size", tc.expectedNewType),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "default_size", tc.expectedDefaultType),
						),
					},
				},
			})
		})
	}
}

// TODO: Test for an entity that has no actions
func TestAzurermWindowsVirtualMachineDataSourceWithNoAction(t *testing.T) {
	mockServer := createLocalServer(t,
		loadTestFile(t, azureWindowsVMTestDataBaseDir, searchRespTestData),
		loadTestFile(t, emptyActionRespTestData),
		loadTestFile(t, entityTagTestDataBaseDir, entityTagsRespTestData),
		loadTestFile(t, entityTagTestDataBaseDir, entityTagRespTestData))
	defer mockServer.Close()

	providerConfig := fmt.Sprintf(config, strings.TrimPrefix(mockServer.URL, "https://"))

	for _, tc := range []struct {
		name                string
		testEntity          string
		expectedEntityName  string
		expectedDefaultType string
		expectedCurrentType string
		expectedNewType     string
	}{
		{
			name:                "Empty VM recommendation",
			testEntity:          azureWindowsVMName,
			expectedEntityName:  azureWindowsVMName,
			expectedDefaultType: azureWindowsVMDefaultType,
			expectedCurrentType: azureWindowsVMCurrentType,
			expectedNewType:     azureWindowsVMCurrentType,
		},
	} {
		t.Run(tc.name, func(t *testing.T) {
			resource.Test(t, resource.TestCase{
				ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
				Steps: []resource.TestStep{
					{
						Config: providerConfig + fmt.Sprintf(azureWindowsVMConfig, tc.testEntity, tc.expectedDefaultType),
						Check: resource.ComposeAggregateTestCheckFunc(
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "entity_name", tc.expectedEntityName),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "entity_type", vmEntityType),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "default_size", tc.expectedDefaultType),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "current_size", tc.expectedCurrentType),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "new_size", tc.expectedNewType),
						),
					},
				},
			})
		})
	}
}

// Tests when default_size is not specified
func TestAzurermWindowsVirtualMachineDataSourceWithoutDefaultType(t *testing.T) {
	mockServer := createLocalServer(t,
		loadTestFile(t, azureWindowsVMTestDataBaseDir, searchRespTestData),
		loadTestFile(t, azureWindowsVMTestDataBaseDir, validVmActionRespTestData),
		loadTestFile(t, entityTagTestDataBaseDir, entityTagsRespTestData),
		loadTestFile(t, entityTagTestDataBaseDir, entityTagRespTestData))
	defer mockServer.Close()

	providerConfig := fmt.Sprintf(config, strings.TrimPrefix(mockServer.URL, "https://"))

	for _, tc := range []struct {
		name                string
		testEntity          string
		expectedEntityName  string
		expectedCurrentType string
		expectedNewType     string
	}{
		{
			name:                "default_size not specified",
			testEntity:          azureWindowsVMName,
			expectedEntityName:  azureWindowsVMName,
			expectedCurrentType: azureWindowsVMCurrentType,
			expectedNewType:     azureWindowsVMDefaultType,
		},
	} {
		t.Run(tc.name, func(t *testing.T) {
			resource.Test(t, resource.TestCase{
				ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
				Steps: []resource.TestStep{
					{
						Config: providerConfig + fmt.Sprintf(azureWindowsVMConfigNoDefaultType, tc.testEntity),
						Check: resource.ComposeAggregateTestCheckFunc(
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "entity_name", tc.expectedEntityName),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "entity_type", vmEntityType),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "current_size", tc.expectedCurrentType),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "new_size", tc.expectedNewType),
						),
					},
				},
			})
		})
	}
}

// Tests error while retrieving entity tags
func TestAzurermWindowsVirtualMachineDataSourceGetEntityTagsError(t *testing.T) {
	mockServer := createLocalServer(t,
		loadTestFile(t, azureWindowsVMTestDataBaseDir, searchRespTestData),
		loadTestFile(t, azureWindowsVMTestDataBaseDir, validVmActionRespTestData),
		"",
		"")
	defer mockServer.Close()

	providerConfig := fmt.Sprintf(config, strings.TrimPrefix(mockServer.URL, "https://"))

	t.Run("Error while retrieving entity tags", func(t *testing.T) {
		resource.Test(t, resource.TestCase{
			ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
			Steps: []resource.TestStep{
				{
					Config:      providerConfig + fmt.Sprintf(azureWindowsVMConfig, azureWindowsVMName, azureWindowsVMDefaultType),
					ExpectError: regexp.MustCompile(`Unable to retrieve entity tags from Turbonomic`),
				},
			},
		})
	})
}

// Tests error while tagging an entity
func TestAzurermWindowsVirtualMachineDataSourceTagEntityError(t *testing.T) {
	mockServer := createLocalServer(t,
		loadTestFile(t, azureWindowsVMTestDataBaseDir, searchRespTestData),
		loadTestFile(t, azureWindowsVMTestDataBaseDir, validVmActionRespTestData),
		"[]",
		"")
	defer mockServer.Close()

	providerConfig := fmt.Sprintf(config, strings.TrimPrefix(mockServer.URL, "https://"))

	t.Run("Error while tagging an entity", func(t *testing.T) {
		resource.Test(t, resource.TestCase{
			ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
			Steps: []resource.TestStep{
				{
					Config:      providerConfig + fmt.Sprintf(azureWindowsVMConfig, azureWindowsVMName, azureWindowsVMDefaultType),
					ExpectError: regexp.MustCompile(`Unable to tag an entity in Turbonomic`),
				},
			},
		})
	})
}

// Tests no error while tagging already tagged entity with discovered "optimized by" tag value
func TestAzurermWindowsVirtualMachineDataSourceTagEntityAlreadyTaggedDiscovered(t *testing.T) {
	mockServer := createLocalServer(t,
		loadTestFile(t, azureWindowsVMTestDataBaseDir, searchRespTestData),
		loadTestFile(t, azureWindowsVMTestDataBaseDir, validVmActionRespTestData),
		`[{"key": "turbonomic_optimized_by","values": ["turbonomic-terraform-provider"]}]`,
		"")
	defer mockServer.Close()

	providerConfig := fmt.Sprintf(config, strings.TrimPrefix(mockServer.URL, "https://"))
	for _, tc := range []struct {
		name                string
		testEntity          string
		expectedEntityName  string
		expectedCurrentType string
		expectedNewType     string
		expectedDefaultType string
	}{
		{
			name:                "No error while tagging already tagged entity",
			testEntity:          azureWindowsVMName,
			expectedEntityName:  azureWindowsVMName,
			expectedCurrentType: azureWindowsVMCurrentType,
			expectedNewType:     azureWindowsVMDefaultType,
			expectedDefaultType: azureWindowsVMDefaultType,
		},
	} {
		t.Run(tc.name, func(t *testing.T) {
			resource.Test(t, resource.TestCase{
				ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
				Steps: []resource.TestStep{
					{
						Config: providerConfig + fmt.Sprintf(azureWindowsVMConfig, tc.testEntity, tc.expectedDefaultType),
						Check: resource.ComposeAggregateTestCheckFunc(
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "entity_name", tc.expectedEntityName),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "entity_type", vmEntityType),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "default_size", tc.expectedDefaultType),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "current_size", tc.expectedCurrentType),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "new_size", tc.expectedNewType),
						),
					},
				},
			})
		})
	}
}

// Tests no error while tagging already tagged entity with not discovered "optimized by" tag value
func TestAzurermWindowsVirtualMachineDataSourceTagEntityAlreadyTaggedNotDiscovered(t *testing.T) {
	mockServer := createLocalServerWithResponse(t,
		loadTestFile(t, azureWindowsVMTestDataBaseDir, searchRespTestData),
		loadTestFile(t, azureWindowsVMTestDataBaseDir, validVmActionRespTestData),
		`[]`,
		Response{
			Message:    "Entity service RPC call failed to complete request: INVALID_ARGUMENT: Trying to insert a tag with a key that already exists: turbonomic_optimized_by",
			HttpStatus: http.StatusBadRequest})
	defer mockServer.Close()

	providerConfig := fmt.Sprintf(config, strings.TrimPrefix(mockServer.URL, "https://"))
	for _, tc := range []struct {
		name                string
		testEntity          string
		expectedEntityName  string
		expectedCurrentType string
		expectedNewType     string
		expectedDefaultType string
	}{
		{
			name:                "Error while tagging already tagged entity",
			testEntity:          azureWindowsVMName,
			expectedEntityName:  azureWindowsVMName,
			expectedCurrentType: azureWindowsVMCurrentType,
			expectedNewType:     azureWindowsVMDefaultType,
			expectedDefaultType: azureWindowsVMDefaultType,
		},
	} {
		t.Run(tc.name, func(t *testing.T) {
			resource.Test(t, resource.TestCase{
				ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
				Steps: []resource.TestStep{
					{
						Config: providerConfig + fmt.Sprintf(azureWindowsVMConfig, tc.testEntity, tc.expectedDefaultType),
						Check: resource.ComposeAggregateTestCheckFunc(
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "entity_name", tc.expectedEntityName),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "entity_type", vmEntityType),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "default_size", tc.expectedDefaultType),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "current_size", tc.expectedCurrentType),
							resource.TestCheckResourceAttr(azureWindowsVMDataSourceRef, "new_size", tc.expectedNewType),
						),
					},
				},
			})
		})
	}
}

// Tests invalid characters in default_size field
func TestAzurermWindowsVirtualMachineDataSourceInvalidDefaultTypeCharacters(t *testing.T) {
	t.Run("Invalid characters in default_size", func(t *testing.T) {
		resource.Test(t, resource.TestCase{
			ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
			Steps: []resource.TestStep{
				{
					Config:      providerConfig + fmt.Sprintf(azureWindowsVMConfig, azureWindowsVMName, azureWindowsVMInvalidType),
					ExpectError: regexp.MustCompile(`Invalid Attribute Value Match`),
				},
			},
		})
	})
}
