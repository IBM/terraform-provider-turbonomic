// Copyright (c) IBM Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by provider-code-generator

package provider

import (
	"fmt"
	"net/http"
	"regexp"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

const (
	azureMSSQLConfig = `
	data "turbonomic_azurerm_mssql_database" "test" {
		entity_name  = "%s"
		default_sku_name = "%s"
	}`

	azureMSSQLConfigNoDefaultType = `
	data "turbonomic_azurerm_mssql_database" "test" {
		entity_name  = "%s"
	}`

	azureMSSQLDataSourceRef  = "data.turbonomic_azurerm_mssql_database.test"
	azureMSSQLName           = "test-db"
	azureMSSQLCurrentSkuName = "gp_gen5_4"
	azureMSSQLDefaultSkuName = "gp_gen5_2"
	azureMSSQLInvalidSkuName = "invalid@type#"
	azureMSSQLEntityType     = "Database"
)

func TestAzurermMssqlDatabaseDataSourceWithValidEntity(t *testing.T) {
	mockServer := createLocalServer(t,
		loadTestFile(t, azureMSSQLTestDataBaseDir, searchRespTestData),
		loadTestFile(t, azureMSSQLTestDataBaseDir, validVmActionRespTestData),
		loadTestFile(t, entityTagTestDataBaseDir, entityTagsRespTestData),
		loadTestFile(t, entityTagTestDataBaseDir, entityTagRespTestData))
	defer mockServer.Close()

	providerConfig := fmt.Sprintf(config, strings.TrimPrefix(mockServer.URL, "https://"))

	for _, tc := range []struct {
		name                        string
		testEntity                  string
		expectedEntityName          string
		expectedDefaultInstanceType string
		expectedCurrentInstanceType string
		expectedNewInstanceType     string
	}{
		{
			name:                        "Valid Azure Mssql database recommendation",
			testEntity:                  azureMSSQLName,
			expectedEntityName:          azureMSSQLName,
			expectedDefaultInstanceType: azureMSSQLDefaultSkuName,
			expectedCurrentInstanceType: azureMSSQLCurrentSkuName,
			expectedNewInstanceType:     azureMSSQLDefaultSkuName,
		},
	} {
		t.Run(tc.name, func(t *testing.T) {
			resource.Test(t, resource.TestCase{
				ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
				Steps: []resource.TestStep{
					{
						Config: providerConfig + fmt.Sprintf(azureMSSQLConfig, tc.testEntity, tc.expectedDefaultInstanceType),
						Check: resource.ComposeAggregateTestCheckFunc(
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "entity_name", tc.expectedEntityName),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "entity_type", azureMSSQLEntityType),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "default_sku_name", tc.expectedDefaultInstanceType),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "current_sku_name", tc.expectedCurrentInstanceType),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "new_sku_name", tc.expectedNewInstanceType),
						),
					},
				},
			})
		})
	}
}

func TestAzurermMssqlDatabaseDataSourceWithInvalidEntity(t *testing.T) {
	mockServer := createLocalServer(t, "[]", "", "", "")
	defer mockServer.Close()

	providerConfig := fmt.Sprintf(config, strings.TrimPrefix(mockServer.URL, "https://"))

	for _, tc := range []struct {
		name                        string
		testEntity                  string
		expectedEntityName          string
		expectedDefaultInstanceType string
		expectedNewInstanceType     string
	}{
		{
			name:                        "Empty Azure Mssql database search",
			testEntity:                  azureMSSQLName,
			expectedEntityName:          azureMSSQLName,
			expectedDefaultInstanceType: azureMSSQLDefaultSkuName,
			expectedNewInstanceType:     azureMSSQLDefaultSkuName,
		},
	} {
		t.Run(tc.name, func(t *testing.T) {
			resource.Test(t, resource.TestCase{
				ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
				Steps: []resource.TestStep{
					{
						Config: providerConfig + fmt.Sprintf(azureMSSQLConfig, tc.testEntity, tc.expectedDefaultInstanceType),
						Check: resource.ComposeAggregateTestCheckFunc(
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "entity_name", tc.expectedEntityName),
							resource.TestCheckNoResourceAttr(azureMSSQLDataSourceRef, "entity_type"),
							resource.TestCheckNoResourceAttr(azureMSSQLDataSourceRef, "current_sku_name"),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "new_sku_name", tc.expectedNewInstanceType),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "default_sku_name", tc.expectedDefaultInstanceType),
						),
					},
				},
			})
		})
	}
}

func TestAzurermMssqlDatabaseDataSourceWithNoAction(t *testing.T) {
	mockServer := createLocalServer(t,
		loadTestFile(t, azureMSSQLTestDataBaseDir, searchRespTestData),
		loadTestFile(t, emptyActionRespTestData),
		loadTestFile(t, entityTagTestDataBaseDir, entityTagsRespTestData),
		loadTestFile(t, entityTagTestDataBaseDir, entityTagRespTestData))
	defer mockServer.Close()

	providerConfig := fmt.Sprintf(config, strings.TrimPrefix(mockServer.URL, "https://"))

	for _, tc := range []struct {
		name                        string
		testEntity                  string
		expectedEntityName          string
		expectedDefaultInstanceType string
		expectedCurrentInstanceType string
		expectedNewInstanceType     string
	}{
		{
			name:                        "Empty Azure Mssql database recommendation",
			testEntity:                  azureMSSQLName,
			expectedEntityName:          azureMSSQLName,
			expectedDefaultInstanceType: azureMSSQLDefaultSkuName,
			expectedCurrentInstanceType: azureMSSQLCurrentSkuName,
			expectedNewInstanceType:     azureMSSQLCurrentSkuName,
		},
	} {
		t.Run(tc.name, func(t *testing.T) {
			resource.Test(t, resource.TestCase{
				ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
				Steps: []resource.TestStep{
					{
						Config: providerConfig + fmt.Sprintf(azureMSSQLConfig, tc.testEntity, tc.expectedDefaultInstanceType),
						Check: resource.ComposeAggregateTestCheckFunc(
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "entity_name", tc.expectedEntityName),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "entity_type", azureMSSQLEntityType),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "default_sku_name", tc.expectedDefaultInstanceType),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "current_sku_name", tc.expectedCurrentInstanceType),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "new_sku_name", tc.expectedNewInstanceType),
						),
					},
				},
			})
		})
	}
}

// Tests when default_type is not specified
func TestAzurermMssqlDatabaseDataSourceWithoutDefaultType(t *testing.T) {
	mockServer := createLocalServer(t,
		loadTestFile(t, azureMSSQLTestDataBaseDir, searchRespTestData),
		loadTestFile(t, azureMSSQLTestDataBaseDir, validVmActionRespTestData),
		loadTestFile(t, entityTagTestDataBaseDir, entityTagsRespTestData),
		loadTestFile(t, entityTagTestDataBaseDir, entityTagRespTestData))
	defer mockServer.Close()

	providerConfig := fmt.Sprintf(config, strings.TrimPrefix(mockServer.URL, "https://"))

	for _, tc := range []struct {
		name                        string
		testEntity                  string
		expectedEntityName          string
		expectedCurrentInstanceType string
		expectedNewInstanceType     string
	}{
		{
			name:                        "Azure Mssql Database default_type not specified",
			testEntity:                  azureMSSQLName,
			expectedEntityName:          azureMSSQLName,
			expectedCurrentInstanceType: azureMSSQLCurrentSkuName,
			expectedNewInstanceType:     azureMSSQLDefaultSkuName,
		},
	} {
		t.Run(tc.name, func(t *testing.T) {
			resource.Test(t, resource.TestCase{
				ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
				Steps: []resource.TestStep{
					{
						Config: providerConfig + fmt.Sprintf(azureMSSQLConfigNoDefaultType, tc.testEntity),
						Check: resource.ComposeAggregateTestCheckFunc(
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "entity_name", tc.expectedEntityName),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "entity_type", azureMSSQLEntityType),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "current_sku_name", tc.expectedCurrentInstanceType),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "new_sku_name", tc.expectedNewInstanceType),
						),
					},
				},
			})
		})
	}
}

// Tests error while retrieving entity tags
func TestAzurermMssqlDatabaseDataSourceGetEntityTagsError(t *testing.T) {
	mockServer := createLocalServer(t,
		loadTestFile(t, azureMSSQLTestDataBaseDir, searchRespTestData),
		loadTestFile(t, azureMSSQLTestDataBaseDir, validVmActionRespTestData),
		"",
		"")
	defer mockServer.Close()

	providerConfig := fmt.Sprintf(config, strings.TrimPrefix(mockServer.URL, "https://"))

	t.Run("Error while retrieving entity tags", func(t *testing.T) {
		resource.Test(t, resource.TestCase{
			ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
			Steps: []resource.TestStep{
				{
					Config: providerConfig + fmt.Sprintf(azureMSSQLConfig, azureMSSQLName,
						azureMSSQLDefaultSkuName,
					),
					ExpectError: regexp.MustCompile(`Unable to retrieve entity tags from Turbonomic`),
				},
			},
		})
	})
}

// Tests error while tagging an entity
func TestAzurermMssqlDatabaseDataSourceTagEntityError(t *testing.T) {
	mockServer := createLocalServer(t,
		loadTestFile(t, azureMSSQLTestDataBaseDir, searchRespTestData),
		loadTestFile(t, azureMSSQLTestDataBaseDir, validVmActionRespTestData),
		"[]",
		"")
	defer mockServer.Close()

	providerConfig := fmt.Sprintf(config, strings.TrimPrefix(mockServer.URL, "https://"))

	t.Run("Error while tagging an entity", func(t *testing.T) {
		resource.Test(t, resource.TestCase{
			ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
			Steps: []resource.TestStep{
				{
					Config: providerConfig + fmt.Sprintf(azureMSSQLConfig, azureMSSQLName,
						azureMSSQLDefaultSkuName),
					ExpectError: regexp.MustCompile(`Unable to tag an entity in Turbonomic`),
				},
			},
		})
	})
}

// Tests no error while tagging already tagged entity with discovered "optimized by" tag value
func TestAzurermMssqlDatabaseDataSourceTagEntityAlreadyTaggedDiscovered(t *testing.T) {
	mockServer := createLocalServer(t,
		loadTestFile(t, azureMSSQLTestDataBaseDir, searchRespTestData),
		loadTestFile(t, azureMSSQLTestDataBaseDir, validVmActionRespTestData),
		`[{"key": "turbonomic_optimized_by","values": ["turbonomic-terraform-provider"]}]`,
		"")
	defer mockServer.Close()

	providerConfig := fmt.Sprintf(config, strings.TrimPrefix(mockServer.URL, "https://"))
	for _, tc := range []struct {
		name                        string
		testEntity                  string
		expectedEntityName          string
		expectedCurrentInstanceType string
		expectedNewInstanceType     string
		expectedDefaultInstanceType string
	}{
		{
			name:                        "No error while tagging already tagged entity",
			testEntity:                  azureMSSQLName,
			expectedEntityName:          azureMSSQLName,
			expectedCurrentInstanceType: azureMSSQLCurrentSkuName,
			expectedNewInstanceType:     azureMSSQLDefaultSkuName,
			expectedDefaultInstanceType: azureMSSQLDefaultSkuName,
		},
	} {
		t.Run(tc.name, func(t *testing.T) {
			resource.Test(t, resource.TestCase{
				ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
				Steps: []resource.TestStep{
					{
						Config: providerConfig + fmt.Sprintf(azureMSSQLConfig, tc.testEntity, tc.expectedDefaultInstanceType),
						Check: resource.ComposeAggregateTestCheckFunc(
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "entity_name", tc.expectedEntityName),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "entity_type", azureMSSQLEntityType),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "default_sku_name", tc.expectedDefaultInstanceType),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "current_sku_name", tc.expectedCurrentInstanceType),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "new_sku_name", tc.expectedNewInstanceType),
						),
					},
				},
			})
		})
	}
}

// Tests no error while tagging already tagged entity with not discovered "optimized by" tag value
func TestAzurermMssqlDatabaseDataSourceTagEntityAlreadyTaggedNotDiscovered(t *testing.T) {
	mockServer := createLocalServerWithResponse(t,
		loadTestFile(t, azureMSSQLTestDataBaseDir, searchRespTestData),
		loadTestFile(t, azureMSSQLTestDataBaseDir, validVmActionRespTestData),
		`[]`,
		Response{
			Message:    "Entity service RPC call failed to complete request: INVALID_ARGUMENT: Trying to insert a tag with a key that already exists: turbonomic_optimized_by",
			HttpStatus: http.StatusBadRequest})
	defer mockServer.Close()

	providerConfig := fmt.Sprintf(config, strings.TrimPrefix(mockServer.URL, "https://"))
	for _, tc := range []struct {
		name                        string
		testEntity                  string
		expectedEntityName          string
		expectedCurrentInstanceType string
		expectedNewInstanceType     string
		expectedDefaultInstanceType string
	}{
		{
			name:                        "Error while tagging already tagged entity",
			testEntity:                  azureMSSQLName,
			expectedEntityName:          azureMSSQLName,
			expectedCurrentInstanceType: azureMSSQLCurrentSkuName,
			expectedNewInstanceType:     azureMSSQLDefaultSkuName,
			expectedDefaultInstanceType: azureMSSQLDefaultSkuName,
		},
	} {
		t.Run(tc.name, func(t *testing.T) {
			resource.Test(t, resource.TestCase{
				ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
				Steps: []resource.TestStep{
					{
						Config: providerConfig + fmt.Sprintf(azureMSSQLConfig, tc.testEntity, tc.expectedDefaultInstanceType),
						Check: resource.ComposeAggregateTestCheckFunc(
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "entity_name", tc.expectedEntityName),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "entity_type", azureMSSQLEntityType),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "default_sku_name", tc.expectedDefaultInstanceType),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "current_sku_name", tc.expectedCurrentInstanceType),
							resource.TestCheckResourceAttr(azureMSSQLDataSourceRef, "new_sku_name", tc.expectedNewInstanceType),
						),
					},
				},
			})
		})
	}
}
